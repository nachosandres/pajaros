auc_test_tod  <- array(dim=c(length(cost),length(degree),folds))
# Matrix for temporarily storing AUC data for a parameter set
auc_temp<-matrix(nrow=2,ncol=folds)
# Matrices for means and variances for each parameter set
auc_train<-matrix(nrow=length(cost),ncol=length(degree))
auc_test<-matrix(nrow=length(cost),ncol=length(degree))
sd_train<-matrix(nrow=length(cost),ncol=length(degree))
sd_test<-matrix(nrow=length(cost),ncol=length(degree))
# Convert input and output data to data frame format
tabla.datos <- data.frame(datos=dat1, grupo=as.factor(clase))
# Tells 'foreach' to use 4 cores when option 'dopar' is specified
registerDoParallel(cores=4)
# Function that allows for storing a list of two lists as output from 'foreach'
comb <- function(x, ...) {
lapply(seq_along(x),
function(i) c(x[[i]], lapply(list(...), function(y) y[[i]])))
}
# Initiate parallel for loop, choosing different training/test sets in each iteration
ls<-list()
ls<-foreach(i=1:folds, .combine='comb', .multicombine=TRUE,
.init=list(list(), list())) %dopar%
{
# Specify training indices
train <- cvindex$subsets[cvindex$which != i]
for (j in 1:length(cost)){
for (k in 1:length(degree)){
# Fit SVM for specific values of cost and degree of polynomial kernel
ajustesvm<-svm(grupo ~ .,data=tabla.datos[train,],
kernel='polynomial',cost=cost[j],degree=degree[k],decision.values=T)
# Obtain binary output from predictions
fitted.train=attributes(predict(ajustesvm,tabla.datos[train,],decision.values=TRUE))$decision.values
fitted.test=attributes(predict(ajustesvm,tabla.datos[-train,],decision.values=TRUE))$decision.values
# Evaluate AUC for a specific choice of cost, degree and training/test sets
auc_train_tod[j,k,i]=performance(prediction(fitted.train,tabla.datos[train,3]),measure="auc")@y.values[[1]]
auc_test_tod[j,k,i] =performance(prediction(fitted.test,tabla.datos[-train,3]),measure="auc")@y.values[[1]]
}
}
# Evaluate expression to be sent to 'foreach' output
list(auc_train_tod[,,i],auc_test_tod[,,i])
}
# Extract two lists of matrices from 'foreach' output
auc_train_list <- ls[[1]]
auc_test_list  <- ls[[2]]
# Get means and variances across different training/test sets
for (j in 1:length(cost)){
for (k in 1:length(degree)){
for (i in 1:folds){
auc_temp[1,i] <- auc_train_list[[i]][j,k]
auc_temp[2,i] <- auc_test_list[[i]][j,k]
}
auc_train[j,k] <- mean(auc_temp[1,])
auc_test[j,k]  <- mean(auc_temp[2,])
sd_train[j,k]  <- sd(auc_temp[1,])
sd_test[j,k]   <- sd(auc_temp[2,])
}
}
# Get final tables
tabla.train <- data.frame(auc_train)
rownames(tabla.train) <- cost
colnames(tabla.train) <- degree
tabla.test <- data.frame(auc_test)
rownames(tabla.test) <- cost
colnames(tabla.test) <- degree
tabla.sdtrain <- data.frame(sd_train)
rownames(tabla.sdtrain) <- cost
colnames(tabla.sdtrain) <- degree
tabla.sdtest <- data.frame(sd_test)
rownames(tabla.sdtest) <- cost
colnames(tabla.sdtest) <- degree
})
tiempo
?system.time
print(tiempo)
proc.time()
proc.time()
proc.time()
tiempo <- proc.time()
# Load all required libraries
library(e1071)
library(ROCR)
library(cvTools)
library(doParallel)
#Number of points to classify
puntos=2e3
# Generate points in 2D space and assign class according to arbitrary function
R=5
dat1=matrix(nrow=puntos,ncol=2)
clase=logical(puntos)
set.seed(8)
for (i in 1:puntos){
dat1[i,] <- c(runif(1,-10,10),runif(1,0,20))
if ((R+runif(1,-2,2))^2 <= ( (dat1[i,2]-12)^2 + (dat1[i,1]-1)^2) -0.4*(dat1[i,1])^3 + 1*(abs(dat1[i,1]^2-dat1[i,2]^.5)) ){
clase[i]<-T
}else{
clase[i]<-F
}
}
plot(dat1[clase,],col='red',xlim=c(-10,10),ylim=c(0,20),pch=16,cex=.5,
xlab="x",ylab="y")
points(dat1[!clase,],col='blue',pch=16,cex=.5)
# Generate cross-validation indices
folds=10
set.seed(1)
cvindex <- cvFolds(puntos,folds)
# SVM parameters to test
cost=c(.01,.1,1,10,100,1000)
degree=c(1,2,3,4,5,6)
# Matrices to hold AUC values for each parameter and training set
auc_train_tod <- array(dim=c(length(cost),length(degree),folds))
auc_test_tod  <- array(dim=c(length(cost),length(degree),folds))
# Matrix for temporarily storing AUC data for a parameter set
auc_temp<-matrix(nrow=2,ncol=folds)
# Matrices for means and variances for each parameter set
auc_train<-matrix(nrow=length(cost),ncol=length(degree))
auc_test<-matrix(nrow=length(cost),ncol=length(degree))
sd_train<-matrix(nrow=length(cost),ncol=length(degree))
sd_test<-matrix(nrow=length(cost),ncol=length(degree))
# Convert input and output data to data frame format
tabla.datos <- data.frame(datos=dat1, grupo=as.factor(clase))
# Tells 'foreach' to use 4 cores when option 'dopar' is specified
registerDoParallel(cores=4)
# Function that allows for storing a list of two lists as output from 'foreach'
comb <- function(x, ...) {
lapply(seq_along(x),
function(i) c(x[[i]], lapply(list(...), function(y) y[[i]])))
}
# Initiate parallel for loop, choosing different training/test sets in each iteration
ls<-list()
ls<-foreach(i=1:folds, .combine='comb', .multicombine=TRUE,
.init=list(list(), list())) %dopar%
{
# Specify training indices
train <- cvindex$subsets[cvindex$which != i]
for (j in 1:length(cost)){
for (k in 1:length(degree)){
# Fit SVM for specific values of cost and degree of polynomial kernel
ajustesvm<-svm(grupo ~ .,data=tabla.datos[train,],
kernel='polynomial',cost=cost[j],degree=degree[k],decision.values=T)
# Obtain binary output from predictions
fitted.train=attributes(predict(ajustesvm,tabla.datos[train,],decision.values=TRUE))$decision.values
fitted.test=attributes(predict(ajustesvm,tabla.datos[-train,],decision.values=TRUE))$decision.values
# Evaluate AUC for a specific choice of cost, degree and training/test sets
auc_train_tod[j,k,i]=performance(prediction(fitted.train,tabla.datos[train,3]),measure="auc")@y.values[[1]]
auc_test_tod[j,k,i] =performance(prediction(fitted.test,tabla.datos[-train,3]),measure="auc")@y.values[[1]]
}
}
# Evaluate expression to be sent to 'foreach' output
list(auc_train_tod[,,i],auc_test_tod[,,i])
}
# Extract two lists of matrices from 'foreach' output
auc_train_list <- ls[[1]]
auc_test_list  <- ls[[2]]
# Get means and variances across different training/test sets
for (j in 1:length(cost)){
for (k in 1:length(degree)){
for (i in 1:folds){
auc_temp[1,i] <- auc_train_list[[i]][j,k]
auc_temp[2,i] <- auc_test_list[[i]][j,k]
}
auc_train[j,k] <- mean(auc_temp[1,])
auc_test[j,k]  <- mean(auc_temp[2,])
sd_train[j,k]  <- sd(auc_temp[1,])
sd_test[j,k]   <- sd(auc_temp[2,])
}
}
# Get final tables
tabla.train <- data.frame(auc_train)
rownames(tabla.train) <- cost
colnames(tabla.train) <- degree
tabla.test <- data.frame(auc_test)
rownames(tabla.test) <- cost
colnames(tabla.test) <- degree
tabla.sdtrain <- data.frame(sd_train)
rownames(tabla.sdtrain) <- cost
colnames(tabla.sdtrain) <- degree
tabla.sdtest <- data.frame(sd_test)
rownames(tabla.sdtest) <- cost
colnames(tabla.sdtest) <- degree
tiempo <- proc.time() - tiempo
tiempo
proc.time()
tiempo
tiempo <- proc.time()
# Load all required libraries
library(e1071)
library(ROCR)
library(cvTools)
library(doParallel)
#Number of points to classify
puntos=2e3
# Generate points in 2D space and assign class according to arbitrary function
R=5
dat1=matrix(nrow=puntos,ncol=2)
clase=logical(puntos)
set.seed(8)
for (i in 1:puntos){
dat1[i,] <- c(runif(1,-10,10),runif(1,0,20))
if ((R+runif(1,-2,2))^2 <= ( (dat1[i,2]-12)^2 + (dat1[i,1]-1)^2) -0.4*(dat1[i,1])^3 + 1*(abs(dat1[i,1]^2-dat1[i,2]^.5)) ){
clase[i]<-T
}else{
clase[i]<-F
}
}
plot(dat1[clase,],col='red',xlim=c(-10,10),ylim=c(0,20),pch=16,cex=.5,
xlab="x",ylab="y")
points(dat1[!clase,],col='blue',pch=16,cex=.5)
# Generate cross-validation indices
folds=10
set.seed(1)
cvindex <- cvFolds(puntos,folds)
# SVM parameters to test
cost=c(.01,.1,1,10,100,1000)
degree=c(1,2,3,4,5,6)
# Matrices to hold AUC values for each parameter and training set
auc_train_tod <- array(dim=c(length(cost),length(degree),folds))
auc_test_tod  <- array(dim=c(length(cost),length(degree),folds))
# Matrix for temporarily storing AUC data for a parameter set
auc_temp<-matrix(nrow=2,ncol=folds)
# Matrices for means and variances for each parameter set
auc_train<-matrix(nrow=length(cost),ncol=length(degree))
auc_test<-matrix(nrow=length(cost),ncol=length(degree))
sd_train<-matrix(nrow=length(cost),ncol=length(degree))
sd_test<-matrix(nrow=length(cost),ncol=length(degree))
# Convert input and output data to data frame format
tabla.datos <- data.frame(datos=dat1, grupo=as.factor(clase))
# Tells 'foreach' to use 4 cores when option 'dopar' is specified
registerDoParallel(cores=4)
# Function that allows for storing a list of two lists as output from 'foreach'
comb <- function(x, ...) {
lapply(seq_along(x),
function(i) c(x[[i]], lapply(list(...), function(y) y[[i]])))
}
# Initiate parallel for loop, choosing different training/test sets in each iteration
ls<-list()
ls<-foreach(i=1:folds, .combine='comb', .multicombine=TRUE,
.init=list(list(), list())) %do%
{
# Specify training indices
train <- cvindex$subsets[cvindex$which != i]
for (j in 1:length(cost)){
for (k in 1:length(degree)){
# Fit SVM for specific values of cost and degree of polynomial kernel
ajustesvm<-svm(grupo ~ .,data=tabla.datos[train,],
kernel='polynomial',cost=cost[j],degree=degree[k],decision.values=T)
# Obtain binary output from predictions
fitted.train=attributes(predict(ajustesvm,tabla.datos[train,],decision.values=TRUE))$decision.values
fitted.test=attributes(predict(ajustesvm,tabla.datos[-train,],decision.values=TRUE))$decision.values
# Evaluate AUC for a specific choice of cost, degree and training/test sets
auc_train_tod[j,k,i]=performance(prediction(fitted.train,tabla.datos[train,3]),measure="auc")@y.values[[1]]
auc_test_tod[j,k,i] =performance(prediction(fitted.test,tabla.datos[-train,3]),measure="auc")@y.values[[1]]
}
}
# Evaluate expression to be sent to 'foreach' output
list(auc_train_tod[,,i],auc_test_tod[,,i])
}
# Extract two lists of matrices from 'foreach' output
auc_train_list <- ls[[1]]
auc_test_list  <- ls[[2]]
# Get means and variances across different training/test sets
for (j in 1:length(cost)){
for (k in 1:length(degree)){
for (i in 1:folds){
auc_temp[1,i] <- auc_train_list[[i]][j,k]
auc_temp[2,i] <- auc_test_list[[i]][j,k]
}
auc_train[j,k] <- mean(auc_temp[1,])
auc_test[j,k]  <- mean(auc_temp[2,])
sd_train[j,k]  <- sd(auc_temp[1,])
sd_test[j,k]   <- sd(auc_temp[2,])
}
}
# Get final tables
tabla.train <- data.frame(auc_train)
rownames(tabla.train) <- cost
colnames(tabla.train) <- degree
tabla.test <- data.frame(auc_test)
rownames(tabla.test) <- cost
colnames(tabla.test) <- degree
tabla.sdtrain <- data.frame(sd_train)
rownames(tabla.sdtrain) <- cost
colnames(tabla.sdtrain) <- degree
tabla.sdtest <- data.frame(sd_test)
rownames(tabla.sdtest) <- cost
colnames(tabla.sdtest) <- degree
tiempo <- proc.time() - tiempo
tiempo
getwd()
write.table(tabla.train,file="tabla.train.txt")
write.table(tabla.sdtrain,file="tabla.sdtrain.txt")
write.table(tabla.test,file="tabla.test.txt")
write.table(tabla.sdtest,file="tabla.sdtest.txt")
tabla.sdtrain
tabla.sdtest
# Load all required libraries
library(e1071)
library(ROCR)
library(cvTools)
library(doParallel)
#Number of points to classify
puntos=2e3
# Generate points in 2D space and assign class according to arbitrary function
R=5
dat1=matrix(nrow=puntos,ncol=2)
clase=logical(puntos)
set.seed(8)
for (i in 1:puntos){
dat1[i,] <- c(runif(1,-10,10),runif(1,0,20))
if ((R+runif(1,-2,2))^2 <= ( (dat1[i,2]-12)^2 + (dat1[i,1]-1)^2) -0.4*(dat1[i,1])^3 + 1*(abs(dat1[i,1]^2-dat1[i,2]^.5)) ){
clase[i]<-T
}else{
clase[i]<-F
}
}
plot(dat1[clase,],col='red',xlim=c(-10,10),ylim=c(0,20),pch=16,cex=.5,
xlab="x",ylab="y")
points(dat1[!clase,],col='blue',pch=16,cex=.5)
# Generate cross-validation indices
folds=10
set.seed(1)
cvindex <- cvFolds(puntos,folds)
# SVM parameters to test
cost=c(.01,.1,1,10,100,1000)
degree=c(1,2,3,4,5,6)
# Matrices to hold AUC values for each parameter and training set
auc_train_tod <- array(dim=c(length(cost),length(degree),folds))
auc_test_tod  <- array(dim=c(length(cost),length(degree),folds))
# Matrix for temporarily storing AUC data for a parameter set
auc_temp<-matrix(nrow=2,ncol=folds)
# Matrices for means and variances for each parameter set
auc_train<-matrix(nrow=length(cost),ncol=length(degree))
auc_test<-matrix(nrow=length(cost),ncol=length(degree))
sd_train<-matrix(nrow=length(cost),ncol=length(degree))
sd_test<-matrix(nrow=length(cost),ncol=length(degree))
# Convert input and output data to data frame format
tabla.datos <- data.frame(datos=dat1, grupo=as.factor(clase))
# Tells 'foreach' to use 4 cores when option 'dopar' is specified
registerDoParallel(cores=4)
# Function that allows for storing a list of two lists as output from 'foreach'
comb <- function(x, ...) {
lapply(seq_along(x),
function(i) c(x[[i]], lapply(list(...), function(y) y[[i]])))
}
tiempo <- proc.time()
# Initiate parallel for loop, choosing different training/test sets in each iteration
ls<-list()
ls<-foreach(i=1:folds, .combine='comb', .multicombine=TRUE,
.init=list(list(), list())) %dopar%
{
# Specify training indices
train <- cvindex$subsets[cvindex$which != i]
for (j in 1:length(cost)){
for (k in 1:length(degree)){
# Fit SVM for specific values of cost and degree of polynomial kernel
ajustesvm<-svm(grupo ~ .,data=tabla.datos[train,],
kernel='polynomial',cost=cost[j],degree=degree[k],decision.values=T)
# Obtain binary output from predictions
fitted.train=attributes(predict(ajustesvm,tabla.datos[train,],decision.values=TRUE))$decision.values
fitted.test=attributes(predict(ajustesvm,tabla.datos[-train,],decision.values=TRUE))$decision.values
# Evaluate AUC for a specific choice of cost, degree and training/test sets
auc_train_tod[j,k,i]=performance(prediction(fitted.train,tabla.datos[train,3]),measure="auc")@y.values[[1]]
auc_test_tod[j,k,i] =performance(prediction(fitted.test,tabla.datos[-train,3]),measure="auc")@y.values[[1]]
}
}
# Evaluate expression to be sent to 'foreach' output
list(auc_train_tod[,,i],auc_test_tod[,,i])
}
tiempo <- proc.time() - tiempo
# Extract two lists of matrices from 'foreach' output
auc_train_list <- ls[[1]]
auc_test_list  <- ls[[2]]
# Get means and variances across different training/test sets
for (j in 1:length(cost)){
for (k in 1:length(degree)){
for (i in 1:folds){
auc_temp[1,i] <- auc_train_list[[i]][j,k]
auc_temp[2,i] <- auc_test_list[[i]][j,k]
}
auc_train[j,k] <- mean(auc_temp[1,])
auc_test[j,k]  <- mean(auc_temp[2,])
sd_train[j,k]  <- sd(auc_temp[1,])
sd_test[j,k]   <- sd(auc_temp[2,])
}
}
# Get final tables
tabla.train <- data.frame(auc_train)
rownames(tabla.train) <- cost
colnames(tabla.train) <- degree
tabla.test <- data.frame(auc_test)
rownames(tabla.test) <- cost
colnames(tabla.test) <- degree
tabla.sdtrain <- data.frame(sd_train)
rownames(tabla.sdtrain) <- cost
colnames(tabla.sdtrain) <- degree
tabla.sdtest <- data.frame(sd_test)
rownames(tabla.sdtest) <- cost
colnames(tabla.sdtest) <- degree
tiempo
# Load all required libraries
library(e1071)
library(ROCR)
library(cvTools)
library(doParallel)
#Number of points to classify
puntos=2e3
# Generate points in 2D space and assign class according to arbitrary function
R=5
dat1=matrix(nrow=puntos,ncol=2)
clase=logical(puntos)
set.seed(8)
for (i in 1:puntos){
dat1[i,] <- c(runif(1,-10,10),runif(1,0,20))
if ((R+runif(1,-2,2))^2 <= ( (dat1[i,2]-12)^2 + (dat1[i,1]-1)^2) -0.4*(dat1[i,1])^3 + 1*(abs(dat1[i,1]^2-dat1[i,2]^.5)) ){
clase[i]<-T
}else{
clase[i]<-F
}
}
plot(dat1[clase,],col='red',xlim=c(-10,10),ylim=c(0,20),pch=16,cex=.5,
xlab="x",ylab="y")
points(dat1[!clase,],col='blue',pch=16,cex=.5)
# Generate cross-validation indices
folds=10
set.seed(1)
cvindex <- cvFolds(puntos,folds)
# SVM parameters to test
cost=c(.01,.1,1,10,100,1000)
degree=c(1,2,3,4,5,6)
# Matrices to hold AUC values for each parameter and training set
auc_train_tod <- array(dim=c(length(cost),length(degree),folds))
auc_test_tod  <- array(dim=c(length(cost),length(degree),folds))
# Matrix for temporarily storing AUC data for a parameter set
auc_temp<-matrix(nrow=2,ncol=folds)
# Matrices for means and variances for each parameter set
auc_train<-matrix(nrow=length(cost),ncol=length(degree))
auc_test<-matrix(nrow=length(cost),ncol=length(degree))
sd_train<-matrix(nrow=length(cost),ncol=length(degree))
sd_test<-matrix(nrow=length(cost),ncol=length(degree))
# Convert input and output data to data frame format
tabla.datos <- data.frame(datos=dat1, grupo=as.factor(clase))
# Tells 'foreach' to use 4 cores when option 'dopar' is specified
registerDoParallel(cores=4)
# Function that allows for storing a list of two lists as output from 'foreach'
comb <- function(x, ...) {
lapply(seq_along(x),
function(i) c(x[[i]], lapply(list(...), function(y) y[[i]])))
}
tiempo <- proc.time()
# Initiate parallel for loop, choosing different training/test sets in each iteration
ls<-list()
ls<-foreach(i=1:folds, .combine='comb', .multicombine=TRUE,
.init=list(list(), list())) %do%
{
# Specify training indices
train <- cvindex$subsets[cvindex$which != i]
for (j in 1:length(cost)){
for (k in 1:length(degree)){
# Fit SVM for specific values of cost and degree of polynomial kernel
ajustesvm<-svm(grupo ~ .,data=tabla.datos[train,],
kernel='polynomial',cost=cost[j],degree=degree[k],decision.values=T)
# Obtain binary output from predictions
fitted.train=attributes(predict(ajustesvm,tabla.datos[train,],decision.values=TRUE))$decision.values
fitted.test=attributes(predict(ajustesvm,tabla.datos[-train,],decision.values=TRUE))$decision.values
# Evaluate AUC for a specific choice of cost, degree and training/test sets
auc_train_tod[j,k,i]=performance(prediction(fitted.train,tabla.datos[train,3]),measure="auc")@y.values[[1]]
auc_test_tod[j,k,i] =performance(prediction(fitted.test,tabla.datos[-train,3]),measure="auc")@y.values[[1]]
}
}
# Evaluate expression to be sent to 'foreach' output
list(auc_train_tod[,,i],auc_test_tod[,,i])
}
tiempo <- proc.time() - tiempo
# Extract two lists of matrices from 'foreach' output
auc_train_list <- ls[[1]]
auc_test_list  <- ls[[2]]
# Get means and variances across different training/test sets
for (j in 1:length(cost)){
for (k in 1:length(degree)){
for (i in 1:folds){
auc_temp[1,i] <- auc_train_list[[i]][j,k]
auc_temp[2,i] <- auc_test_list[[i]][j,k]
}
auc_train[j,k] <- mean(auc_temp[1,])
auc_test[j,k]  <- mean(auc_temp[2,])
sd_train[j,k]  <- sd(auc_temp[1,])
sd_test[j,k]   <- sd(auc_temp[2,])
}
}
# Get final tables
tabla.train <- data.frame(auc_train)
rownames(tabla.train) <- cost
colnames(tabla.train) <- degree
tabla.test <- data.frame(auc_test)
rownames(tabla.test) <- cost
colnames(tabla.test) <- degree
tabla.sdtrain <- data.frame(sd_train)
rownames(tabla.sdtrain) <- cost
colnames(tabla.sdtrain) <- degree
tabla.sdtest <- data.frame(sd_test)
rownames(tabla.sdtest) <- cost
colnames(tabla.sdtest) <- degree
tiempo
library(xtable)
tabla.train<-read.table("tabla.train.txt")
xtable(tabla.train)
?xtable
?colnames
?xtable
setwd("/home/nacho/CompAlRen/pajaros/nnetwork")
train8 <- as.matrix(read.table("confmat_train8.txt"))
test8 <- as.matrix(read.table("confmat_test8.txt"))
sum(diag(train8))/sum(train8)*100
sum(diag(test8))/sum(test8)*100
